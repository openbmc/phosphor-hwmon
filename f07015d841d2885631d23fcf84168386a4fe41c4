{
  "comments": [
    {
      "key": {
        "uuid": "d0a1f26d_3c778832",
        "filename": "mainloop.cpp",
        "patchSetId": 23
      },
      "lineNbr": 456,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-06-16T09:41:50Z",
      "side": 1,
      "message": "Better to move this part of code into a separated function, so that it looks a bit clearer, and then better to add some test case for this function.\nAnd I guess it could be shared with the code in sensor.cpp?",
      "revId": "f07015d841d2885631d23fcf84168386a4fe41c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31efb907_7bd4321b",
        "filename": "mainloop.cpp",
        "patchSetId": 23
      },
      "lineNbr": 456,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-05-05T22:27:35Z",
      "side": 1,
      "message": "Yes, I will factor it out to sensor.cpp",
      "parentUuid": "d0a1f26d_3c778832",
      "revId": "f07015d841d2885631d23fcf84168386a4fe41c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52c6a102_7d685971",
        "filename": "mainloop.cpp",
        "patchSetId": 23
      },
      "lineNbr": 485,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-06-16T09:41:50Z",
      "side": 1,
      "message": "This still blocks the main thread for the asyncReadTimeout.\nI\u0027m OK with this, but eventually it could be better to schedule the async read and register a callback to update the sensor value, then it does not block at all.",
      "revId": "f07015d841d2885631d23fcf84168386a4fe41c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab5ab3ae_1c96950e",
        "filename": "mainloop.cpp",
        "patchSetId": 23
      },
      "lineNbr": 485,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-05-05T22:27:35Z",
      "side": 1,
      "message": "Agreed, this is not a true asynchronous read but I believe a step in the right direction as it no longer waits indefinitely - which could bring down IPMI if an I2C sensor is being slow for example.\n\nI will update with a comment noting that this is not true asynchronous read.",
      "parentUuid": "52c6a102_7d685971",
      "revId": "f07015d841d2885631d23fcf84168386a4fe41c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82f893fa_838da02b",
        "filename": "mainloop.cpp",
        "patchSetId": 23
      },
      "lineNbr": 500,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-06-16T09:41:50Z",
      "side": 1,
      "message": "Why do you throw on s good (but timedout) reading?",
      "revId": "f07015d841d2885631d23fcf84168386a4fe41c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8761f4fe_855fb047",
        "filename": "mainloop.cpp",
        "patchSetId": 23
      },
      "lineNbr": 500,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-05-05T22:27:35Z",
      "side": 1,
      "message": "I will update the comment with better explanation. This is the case for when `valueIsValid` is false, which if you look above is the case when the sensor was previously already in the timedoutMap. This means that the sensor has already timedout (to be placed in the timedoutMap), and we\u0027re doing a 0 second wait (every 1 second poll) to see if the thread ever finished reading. If it finished reading (but past the timedout period), we will erase it from the timedout map so that we can try again on the next read cycle.\n\nWe throw because the value took too long to read, and is likely a corrupted / invalid value - better to do a \"clean\" read next cycle that doesn\u0027t timeout.",
      "parentUuid": "82f893fa_838da02b",
      "revId": "f07015d841d2885631d23fcf84168386a4fe41c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19114beb_04e723f3",
        "filename": "sensor.hpp",
        "patchSetId": 23
      },
      "lineNbr": 109,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-06-16T09:41:50Z",
      "side": 1,
      "message": "Better to `using xxx \u003d` this type so that the code reads better.",
      "range": {
        "startLine": 109,
        "startChar": 17,
        "endLine": 109,
        "endChar": 76
      },
      "revId": "f07015d841d2885631d23fcf84168386a4fe41c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ee57f02_c8c7146d",
        "filename": "sensor.hpp",
        "patchSetId": 23
      },
      "lineNbr": 109,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-05-05T22:27:35Z",
      "side": 1,
      "message": "Good point, will do that.",
      "parentUuid": "19114beb_04e723f3",
      "range": {
        "startLine": 109,
        "startChar": 17,
        "endLine": 109,
        "endChar": 76
      },
      "revId": "f07015d841d2885631d23fcf84168386a4fe41c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}